import { NextRequest, NextResponse } from "next/server";

export interface AIResolutionRequest {
  question: string;
  marketAddress: string;
  endTime: number;
  context?: string;
}

export interface AIResolutionResponse {
  outcome: "YES" | "NO";
  confidence: number;
  reasoning: string;
  success: boolean;
}

export async function POST(req: NextRequest) {
  try {
    const { question, marketAddress, endTime, context }: AIResolutionRequest =
      await req.json();

    console.log("ü§ñ AI Resolution Request:", {
      question,
      marketAddress,
      endTime,
    });

    // Basic validation
    if (!question || !marketAddress) {
      return NextResponse.json(
        { error: "Missing required fields: question, marketAddress" },
        { status: 400 }
      );
    }

    // Check if market has ended
    const currentTime = Math.floor(Date.now() / 1000);
    if (currentTime < endTime) {
      return NextResponse.json(
        { error: "Market has not ended yet" },
        { status: 400 }
      );
    }

    // For now, let's implement a simple rule-based system
    // Later we can integrate with OpenAI/Anthropic
    const aiResolution = await resolveWithAI(question, context);

    console.log("üéØ AI Resolution:", aiResolution);

    return NextResponse.json(aiResolution);
  } catch (error) {
    console.error("‚ùå AI Resolution Error:", error);
    return NextResponse.json(
      { error: "Failed to resolve market", details: error },
      { status: 500 }
    );
  }
}

async function resolveWithAI(
  question: string,
  context?: string
): Promise<AIResolutionResponse> {
  console.log("üß† Analyzing question with Google Gemini:", question);

  const apiKey = "AIzaSyAR8MpaaHWl46bW9YO85lYCr_0SR_jCW5A";
  if (!apiKey) {
    console.error("‚ùå GOOGLE_GEMINI_API_KEY not found");
    throw new Error("Google Gemini API key not configured");
  }

  const prompt = `You are a prediction market resolver. Analyze this question and provide a definitive YES or NO answer based on factual information and current reality.

Question: "${question}"
Context: ${context || "Current date: " + new Date().toISOString()}

Important guidelines:
- Only answer YES or NO, nothing else
- Base your answer on verifiable facts
- If the outcome is uncertain or unknowable, lean toward the most likely outcome
- Provide clear reasoning for your decision

Respond with a JSON object in this exact format:
{
  "outcome": "YES" or "NO",
  "confidence": 0.0-1.0,
  "reasoning": "brief factual explanation"
}`;

  try {
    const response = await fetch(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-goog-api-key": apiKey,
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 0.1,
            topK: 1,
            topP: 0.8,
            maxOutputTokens: 200,
          },
        }),
      }
    );

    if (!response.ok) {
      throw new Error(
        `Gemini API error: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log("ü§ñ Raw Gemini response:", data);

    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!generatedText) {
      throw new Error("No text generated by Gemini");
    }

    console.log("üìù Generated text:", generatedText);

    // Try to extract JSON from the response
    const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error("No JSON found in Gemini response");
    }

    const parsedResponse = JSON.parse(jsonMatch[0]);

    // Validate the response format
    if (
      !parsedResponse.outcome ||
      !["YES", "NO"].includes(parsedResponse.outcome)
    ) {
      throw new Error("Invalid outcome in Gemini response");
    }

    return {
      outcome: parsedResponse.outcome,
      confidence: parsedResponse.confidence || 0.8,
      reasoning: parsedResponse.reasoning || "AI analysis completed",
      success: true,
    };
  } catch (error) {
    console.error("‚ùå Gemini API Error:", error);

    // Fallback to mock behavior if API fails
    console.log("üîÑ Falling back to mock resolution");
    return {
      outcome: "YES",
      confidence: 0.5,
      reasoning: `AI service unavailable, using fallback. Error: ${error instanceof Error ? error.message : "Unknown error"}`,
      success: false,
    };
  }
}
